# Template docker-compose application

version: "2.4"

services:

  api-private:
    x-publish: true
    image: ${DOCKER_REGISTRY:-}${DOCKER_IMAGE_PREFIX:-}api-private:${DOCKER_TAG:-cache}
    build:
      context: .
      target: api-private
      dockerfile: "api-private/Dockerfile"
    environment:
      - "PORT=8080"
      - "HASURA_GRAPHQL_ADMIN_SECRET=${HASURA_GRAPHQL_ADMIN_SECRET:-notactuallysecret}"
      - "HASURA_GRAPHQL_ORIGIN=http://graphql:8080"
      - "APP_FQDN=${APP_FQDN:-app1.dev}"
      - "API_KEY=no-one-gets-in-without-this"
    networks:
      - default
    logging:
      driver: ${LOGGING_API_PRIVATE:-json-file}

  api-public:
    x-publish: true
    image: ${DOCKER_REGISTRY:-}${DOCKER_IMAGE_PREFIX:-}api-public:${DOCKER_TAG:-cache}
    build:
      context: .
      target: api-public
      dockerfile: "api-public/Dockerfile"
      args:
        DOCKER_TAG: ${DOCKER_TAG:-cache}
        DOCKER_REGISTRY: ${DOCKER_REGISTRY:-}
        DOCKER_IMAGE_PREFIX: ${DOCKER_IMAGE_PREFIX:-}
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - "PORT=8080"
      - "HASURA_GRAPHQL_ADMIN_SECRET=${HASURA_GRAPHQL_ADMIN_SECRET:-notactuallysecret}"
      - "HASURA_GRAPHQL_ORIGIN=http://graphql:8080"
      - "ORIGIN_VOUCH_INTERNAL=http://vouch:9090"
      - "APP_FQDN=${APP_FQDN:-app1.dev}"
      # Only used when running two https apps to avoid port collisions
      - "APP_PORT=${APP_PORT:-443}"
    networks:
      - default
    logging:
      driver: ${LOGGING_API_PUBLIC:-json-file}

  graphql:
    x-publish: true
    image: ${DOCKER_REGISTRY}${DOCKER_IMAGE_PREFIX}graphql:${DOCKER_TAG:-cache}
    build:
      context: ./graphql
    healthcheck:
      test: wget --quiet --spider http://localhost:8080/v1/version || exit 1
      interval: 5s
      timeout: 3s
      retries: 20
      start_period: 2s
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - "HASURA_GRAPHQL_SERVER_PORT=8080"
      - "HASURA_GRAPHQL_DATABASE_URL=postgres://postgres:postgres@postgres:5432/postgres"
      # https://docs.hasura.io/1.0/graphql/manual/migrations/existing-database.html
      - "HASURA_GRAPHQL_ENABLE_CONSOLE=false" # set to "false" to disable console, see `just console`
      - "HASURA_GRAPHQL_ENABLED_LOG_TYPES=startup, http-log, webhook-log, websocket-log, query-log"
      - "HASURA_GRAPHQL_ADMIN_SECRET=${HASURA_GRAPHQL_ADMIN_SECRET:-notactuallysecret}"
      - "HASURA_GRAPHQL_AUTH_HOOK=http://api-private:8080/hook/auth"
      - "HASURA_GRAPHQL_AUTH_HOOK_MODE=GET"
      - "HASURA_GRAPHQL_HOOKS=http://api-private:8080/hook"
      # Restrict access to the api-private service via a check to a header for a key
      - "HOOKS_API_KEY=no-one-gets-in-without-this"
      - "HASURA_GRAPHQL_LOG_LEVEL=debug"
    networks:
      - default
    logging:
      driver: ${LOGGING_GRAPHQL:-json-file}

  postgres:
    image: postgres:10.3
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgres:/var/lib/postgresql/data
    networks:
      - default
    logging:
      driver: ${LOGGING_DB:-none}

  # oauth manager, talks to github to validate oauth tokens
  vouch:
    # the only reason this image is built is because gcp
    # does not allow all image pulls from docker.io, just
    # popular ones. so build and publish internally
    x-publish: true
    image: ${DOCKER_REGISTRY}${DOCKER_IMAGE_PREFIX}vouch:${DOCKER_TAG:-cache}
    build:
      context: ./vouch
    networks:
      - default
    logging:
      driver: ${LOGGING_VOUCH:-none}


volumes:
  postgres:
  vouch:


networks:
  default:
    driver: bridge
