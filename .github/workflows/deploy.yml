# .yaml files in this directory are executed workflows:
# https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions
# Triggers deploys on tag pushes, and branch pushes matching '**@<deployment>'
#  - tag:
#     - if the tag matches '**@<deployment>'
#     - and there is a corresponding deployment (cloud/<deployment>)
#       - then trigger a deployment @ cloud/<deployment> (at this git commit)
#  - branch GITHUB_REF=**@<deployment>:
#     - check all deployments cloud/<deployment>
#       - then trigger a deployment @ cloud/<deployment> (at this git commit)
name: deploy
on:
  push:
    # Sequence of patterns matched against refs/heads
    branches:
      # Push events on all branches with a '@'
      # e.g. mybranch/@test.myapp.com
      - '**@*'
      # Push events to branches matching refs/heads/mona/octocat
      # - 'mona/octocat'
      # Push events to branches matching refs/heads/releases/10
      # - 'releases/**'
    # Sequence of patterns matched against refs/tags
    tags:
      # deploy if a deployment matching the tag
      - '**@*'

env:
  DOCKER_COMPOSE_VERSION: 1.25.4
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  deploy_from_ref:
    runs-on: ubuntu-latest
    steps:
      - id: checkout
        name: Check out the repo
        uses: actions/checkout@v2
        with:
          fetch-depth: '0'

      - id: check
        name: Check if a deployment exists *@<fqdn>
        shell: bash
        env:
          GOOGLE_APPLICATION_CREDENTIALS_CONTENT: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS_CONTENT }}
        run: |
          FQDN="${GITHUB_REF##*@}"
          echo "GITHUB_REF=$GITHUB_REF"
          echo "FQDN=$FQDN"
          if [ ! -d cloud/$FQDN ]; then
            echo "no matching deployment";
            exit 1
          else
            echo "ABOUT TO just cloud/$FQDN/apply";
            if [ ! -z "$GOOGLE_APPLICATION_CREDENTIALS_CONTENT" ]; then
              echo "Creating cloud/.provider/gcp/terraform-admin.json";
              echo "$GOOGLE_APPLICATION_CREDENTIALS_CONTENT" > cloud/.provider/gcp/terraform-admin.json;
            fi
          fi

      # This enables build caching
      - id: buildx
        if: steps.check.conclusion == 'success'
        name: buildx
        uses: docker/setup-buildx-action@v1
        with:
          install: true
          driver: docker

      - id: login
        if: steps.buildx.conclusion == 'success'
        name: Login to GitHub Packages Docker Registry
        # We could login directly, but the docker/login-action@v1 action includes a cleanup operation that deletes the auth credential
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          # username: ${{ github.repository_owner }}
          # the docs say to use the above, but the local tester 'act' hates it but this works on both
          username: ${{ github.actor }}
          # https://docs.github.com/en/free-pro-team@latest/actions/reference/authentication-in-a-workflow#about-the-github_token-secret
          password: ${{ secrets.GITHUB_TOKEN }}

      - id: image
        if: steps.login.conclusion == 'success'
        name: Prepare cloud image
        uses: ./.github/actions/cloud-image

      - id: deploy
        if: steps.image.conclusion == 'success'
        name: Deploy to matching cloud/$FQDN
        uses: ./.github/actions/cloud
        env:
          DOCKER_REGISTRY: ghcr.io
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          # Finally actually deploy
          command: "echo GITHUB_REF=$GITHUB_REF ; FQDN=${GITHUB_REF##*@} ; echo FQDN=$FQDN ; just cloud/$FQDN/apply"
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - id: ensure_clean_exit
        if: steps.image.conclusion != 'success'
        name: Ensure green check even though there were no deploy
        uses: ./.github/actions/cloud
        env:
          DOCKER_REGISTRY: ghcr.io
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          # Finally actually deploy
          command: "echo GITHUB_REF=$GITHUB_REF ; FQDN=${GITHUB_REF##*@} ; echo FQDN=$FQDN ; just cloud/$FQDN/apply"
          github_token: ${{ secrets.GITHUB_TOKEN }}
