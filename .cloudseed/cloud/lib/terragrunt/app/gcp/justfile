# just docs: https://github.com/casey/just
set shell := ["bash", "-c"]
# Avoid ../../../../foo type paths by hard-coding the repository root turning paths into e.g. /repo/cloud/foo
export ROOT                           := env_var_or_default("GITHUB_WORKSPACE", `git rev-parse --show-toplevel`)
# The terraform service account that creates all other project (deployments) is:
# cloudseed-terraform-admin@<repo-owner>-<repo-name>-<hash>.iam.gserviceaccount.com
# e.g. if the git repo name is 'yourname/reponame' then the service acount is: cloudseed-terraform-admin@yourname-reponame-<hash>.iam.gserviceaccount.com
export GOOGLE_APPLICATION_CREDENTIALS := ROOT + "/cloud/.provider/gcp/terraform-admin.json"
export GOOGLE_ORGANIZATION_JSON       := ROOT + "/cloud/.provider/gcp/organization.json"
# Used in terragrunt/terraform to create the actual public URLs
export FQDN                           := `basename $(dirname $PWD)`
DENO_SOURCE                           := ROOT + "/.cloudseed/deno"
pwd           := env_var("PWD")
root          := "<${PWD}/>"
bold          := '\033[1m'
normal        := '\033[0m'
green         := "\\e[32m"
yellow        := "\\e[33m"
magenta_light := "\\e[92m"

# If not in docker, get inside
_help:
    #!/usr/bin/env bash
    if [ -f /.dockerenv ]; then
        echo -e "🌱 Cloudseed 🌱"
        echo -e "   {{bold}}$(basename $(dirname $PWD)){{normal}} 🚀 @ gcp (Google Compute Engine)"
        echo -e "   See playbook: {{bold}}${ROOT}/.cloudseed/cloud/lib/provider/gcp/playbook.md {{normal}}"
        echo -e ""
        just --list --unsorted
        echo -e ""
        echo -e "  cloud resource commands:"
        echo -e ""
        for D in */; do
            echo -e "      just $D";
        done
        echo -e ""
    else
        just {{ROOT}}/cloud/_docker
    fi

# 🌱 some resources need some local initialization
init:
    #!/usr/bin/env bash
    set -e
    for D in */; do
        if [ -f ${D}/justfile ]; then
            just ${D}/init;
        fi
    done

# # TODO: do we have to explicitly call e.g. project then vpc then db etc or does terragrunt handle it for us?
# terragrunt init-all
# 🌱 requries init. terraform apply to all application resources. the first time, apply twice in a row to resolve circular dependencies
@apply *args="--terragrunt-non-interactive": init _ensure_credentials
    echo -e "🚪 🚀 {{bold}}${FQDN}{{normal}} deploying... 🚪 "
    # First check if the project has been actually created in gcp, without that, everything will fail hard
    cd project && if [ "$(terragrunt output -json)" = "{}" ]; then \
        echo "project is not yet created, creating now..."; \
        just apply; \
    fi
    # Ensure oauth credentials
    just vouch/extra ensure_oauth_credentials
    # Fail if any files are uncommitted
    deno run --unstable --allow-all {{DENO_SOURCE}}/git/git_fail_if_uncommitted_files.ts
    just push_images
    # First ensure that strict dependencies are done first
    # TODO: these are baked in here in a sensible order, not easy to DRY
    terragrunt apply-all {{args}}
    echo -e "🚪 🚀 💚 😸 {{bold}}${FQDN}{{normal}} deployment successful! 🚪 "
    echo -e ""
    echo -e "One time only: update your domain registrar's DNS records: 👉 🔗 {{green}}{{bold}}https://console.cloud.google.com/run/domains?project=$(just project_id){{normal}}"
    echo -e "                                                                 - select {{green}}Actions{{normal}}"
    echo -e "                                                                 - Follow instructions"
    echo -e ""
    echo -e "Is your automated deployment correctly set up? 👉 {{green}}.github/playbook.md{{normal}}"

    just open

# 🌱 Fast development iteration: 1) git commit 2) deploy updated (versioned) resource
@develop:
    cd $ROOT ; git add -u ; git commit -m "wip@$(basename $(dirname $PWD))" || true
    just apply -auto-approve --terragrunt-non-interactive

# 🌱 terraform destroy to all application resources
@destroy *args="": _ensure_credentials
    # Check if project is locked
    if [ "$(gcloud alpha resource-manager liens list --project=$(just project_id) --format json)" != "[]" ]; then \
        echo -e "💥 This project is LOCKED to prevent accidental deletion: https://cloud.google.com/resource-manager/docs/project-liens"; \
        echo -e "👉 To list locks: {{green}}gcloud alpha resource-manager liens list --project=$(just project_id) --format json{{normal}}"; \
        echo -e "👉 To unlock: {{green}}just unlock{{normal}}"; \
        exit 1; \
    fi
    echo -e "❗ Have to surgically remove the graphql user from the terraform state: https://serverfault.com/questions/905386/terraform-destroy-failing-because-google-sql-user-owns-databases"
    if [ "{{args}}" != "--terragrunt-non-interactive" ]; then \
        deno run --unstable --allow-all {{DENO_SOURCE}}/exec/fail_if_wrong_answer.ts --question "Begin permanent destruction? (only 'yes' accepted):" --answer "yes" ; \
    fi
    # Remove the db terraform state (not the actual db) https://github.com/hashicorp/terraform-provider-google/issues/3820#issuecomment-616884145
    cd sql && terragrunt state rm google_sql_database.graphql || true
    cd sql && terragrunt state rm google_sql_database_instance.instance || true
    cd sql && terragrunt state rm random_id.instance_name_suffix || true
    cd sql && terragrunt state rm google_sql_user.graphql_user || true
    echo -e "🚪 <${PWD}/> {{bold}}FQDN=${FQDN} terragrunt destroy-all --terragrunt-non-interactive --terragrunt-ignore-external-dependencies {{args}} {{normal}}🚪 "
    terragrunt destroy-all --terragrunt-non-interactive --terragrunt-ignore-external-dependencies {{args}}
    # The following ensures the project is deleted (and all containing resources)
    gcloud projects delete $(just project_id) || true
    echo -e "🚪 Next step is for a human: {{bold}}rm -rf $PWD {{normal}}🚪 "

# 🌱 Go to the live app (FQDN) (assuming there is something for the browser)
@open:
    deno run --unstable --allow-all {{DENO_SOURCE}}/exec/open_url.ts https://${FQDN}

# 🌱 show the Google Cloud Platform project console
@console:
     deno run --unstable --allow-all {{DENO_SOURCE}}/exec/open_url.ts https://console.cloud.google.com/home/dashboard?project=$(just project_id)&folder=&organizationId=

# terragrunt but with cloudseed env vars (use this instead of naked terragrunt, some env vars might be missing)
@terragrunt *args="":
    terragrunt {{args}}

alias t:= terragrunt

# alias to gcp provider commands (status, initialization, etc)
@provider +args="":
    just $ROOT/.cloudseed/cloud/lib/provider/gcp/{{args}}

# alias to CI commands, here for building (and pushing?)
@ci +args="":
    just $ROOT/ci/{{args}}

# print the GCP project_id (used to generate docker registry URLs)
@project_id:
    cat locals.json | jq -r .project_id

# Any container-consuming service (there will be as least one) requires the docker images published in the project docker registry. Assumes images are already built
@push_images *images="": (provider "activate_service_account") _authenticate_gcp_docker
    just ci build {{images}}
    just _push_images {{images}}

# If the deployment uses a docker.io public image, push a public image to the internal registry
push_public_image image:
    docker pull {{image}}
    docker tag {{image}} $(just _docker_registry)/{{image}}
    docker push $(just _docker_registry)/{{image}}

# TODO: is this needed? Can just point to the console. See cloud/lib/provider/gcp/playbook.md. Show the domain mappings for this project
@domain_mappings:
    gcloud beta run --platform managed --project $(just project_id) --region us-central1 domain-mappings describe --domain $FQDN --format json | jq .

# Administrator/owner can prevent the project from being deleted: https://cloud.google.com/resource-manager/docs/project-liens
@lock: (provider "root_account_authenticate")
    gcloud alpha resource-manager liens create \
        --restrictions=resourcemanager.projects.delete \
        --reason="Locked by administator" \
        --project=$(just project_id)

# Unlock locked project, removing deletion protection:            https://cloud.google.com/resource-manager/docs/project-liens
@unlock:
    PROJECT_ID=$(just project_id) \
    gcloud alpha resource-manager liens delete \
        --project=${PROJECT_ID} \
        $(just _lock_id)

# Get the lock id, if any
@_lock_id:
    gcloud alpha resource-manager liens list --project $(just project_id) --format json | jq -r '.[0].name' | cut -d'/' -f 2

@_push_images *images="":
    just ci tag_and_push $(just _docker_registry) {{images}}

@_docker_registry:
    echo gcr.io/$(just project_id)

@_authenticate_gcp_docker:
    echo -e "🚪 <${PWD}> {{bold}}gcloud auth configure-docker {{normal}}🚪 "
    gcloud auth configure-docker gcr.io

@_ensure_credentials:
    just provider activate_service_account
